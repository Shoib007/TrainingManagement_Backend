# Generated by Django 4.1.5 on 2023-02-19 15:00

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import k12Api.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='schoolDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school', models.CharField(max_length=255)),
                ('region', models.CharField(max_length=255)),
                ('am', models.CharField(max_length=255)),
                ('om', models.CharField(max_length=255)),
                ('catagory', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='TrainerDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fname', models.CharField(default=None, max_length=255)),
                ('contact', models.IntegerField(default=91)),
                ('trainerLink', models.URLField(max_length=255)),
                ('email', models.EmailField(default='example@example.com', max_length=255)),
                ('trainer_type', models.CharField(max_length=200)),
                ('department', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='TrainingDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('startTime', models.TimeField()),
                ('endTime', models.TimeField()),
                ('TrainingDate', models.DateField()),
                ('schoolName', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='SchoolDetails', to='k12Api.schooldetail')),
                ('trainerName', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='TrainerDetails', to='k12Api.trainerdetails')),
            ],
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(max_length=255, unique=True)),
                ('password', models.CharField(max_length=255)),
                ('phoneNumber', models.IntegerField(default=91, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='TrainerName', to='k12Api.trainerdetails')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', k12Api.manager.UserManager()),
            ],
        ),
    ]
